version: 2.1

executors:
  docker-executor:
    docker:
      - image: php:8-fpm-alpine
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout

      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              bash \
              git \
              curl \
              gcc \
              g++ \
              make \
              autoconf \
              pkgconf \
              openssh

      - run:
          name: Install PHP Extensions
          command: |
            set -ex
            apk add --no-cache \
              libjpeg-turbo-dev \
              libpng-dev \
              freetype-dev
            docker-php-ext-configure gd --with-freetype --with-jpeg
            docker-php-ext-install -j$(nproc) gd pdo pdo_mysql exif
            docker-php-ext-enable exif

      - run:
          name: Install Composer
          command: |
            set -ex
            curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
            cd src
            composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

      - run:
          name: Run Laravel Tests
          command: |
            set -ex
            cd src
            cp .env.example .env
            # Add environment variables to .env file
            echo "APP_NAME=Laravel" >> .env
            echo "APP_ENV=local" >> .env
            echo "APP_KEY=base64:HeNgMQOR6kIk2e6EADYGEeuPC9FrOqd7UX/q1K9Uu+8=" >> .env
            echo "APP_DEBUG=true" >> .env
            echo "APP_URL=http://localhost" >> .env
            echo "LOG_CHANNEL=stack" >> .env
            echo "LOG_DEPRECATIONS_CHANNEL=null" >> .env
            echo "LOG_LEVEL=debug" >> .env
            echo "DB_CONNECTION=mysql" >> .env
            echo "DB_HOST=${DB_HOST}" >> .env
            echo "DB_PORT=${DB_PORT}" >> .env
            echo "DB_DATABASE=${DB_DATABASE}" >> .env
            echo "DB_USERNAME=${DB_USERNAME}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
            echo "QUEUE_CONNECTION=sync" >> .env
            echo "SESSION_DRIVER=file" >> .env
            echo "SESSION_LIFETIME=120" >> .env
            echo "MEMCACHED_HOST=127.0.0.1" >> .env
            echo "REDIS_HOST=127.0.0.1" >> .env
            echo "REDIS_PASSWORD=null" >> .env
            echo "REDIS_PORT=6379" >> .env
            echo "MAIL_MAILER=smtp" >> .env
            echo "MAIL_HOST=sandbox.smtp.mailtrap.io" >> .env
            echo "MAIL_PORT=587" >> .env
            echo "MAIL_USERNAME=4cf3ea16e0c99b" >> .env
            echo "MAIL_PASSWORD=f364e9cdb4efb6" >> .env
            echo "MAIL_ENCRYPTION=tls" >> .env
            echo "MAIL_FROM_ADDRESS=hello@example.com" >> .env
            echo "MAIL_FROM_NAME=\"Your Application Name\"" >> .env
            echo "AWS_ACCESS_KEY_ID=your_aws_access_key_id" >> .env
            echo "AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key" >> .env
            echo "AWS_DEFAULT_REGION=us-east-1" >> .env
            echo "AWS_BUCKET=your_aws_bucket" >> .env
            echo "PUSHER_APP_ID=your_pusher_app_id" >> .env
            echo "PUSHER_APP_KEY=your_pusher_app_key" >> .env
            echo "PUSHER_APP_SECRET=your_pusher_app_secret" >> .env
            echo "PUSHER_HOST=" >> .env
            echo "PUSHER_PORT=443" >> .env
            echo "PUSHER_SCHEME=https" >> .env
            echo "PUSHER_APP_CLUSTER=mt1" >> .env
            echo "VITE_PUSHER_APP_KEY=\${PUSHER_APP_KEY}" >> .env
            echo "VITE_PUSHER_HOST=\${PUSHER_HOST}" >> .env
            echo "VITE_PUSHER_PORT=\${PUSHER_PORT}" >> .env
            echo "VITE_PUSHER_SCHEME=\${PUSHER_SCHEME}" >> .env
            echo "VITE_PUSHER_APP_CLUSTER=\${PUSHER_APP_CLUSTER}" >> .env
            echo "JWT_SECRET=your_jwt_secret" >> .env
            echo "MEDIA_DISK=s3" >> .env
            echo "STRIPE_SECRET_KEY=your_stripe_secret_key" >> .env
            echo "CURRENCY=usd" >> .env
            echo "FRONT_END_DOMAIN=http://localhost:3000" >> .env
            echo "STREAM_API_KEY=your_stream_api_key" >> .env
            echo "STREAM_API_SECRET=your_stream_api_secret" >> .env
            echo "STREAM_APP_ID=your_stream_app_id" >> .env

            php artisan config:clear
            php artisan config:cache
            php artisan migrate --force

  deploy:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7

      - checkout

      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              docker-compose \
              openssh

      - run:
          name: Build Docker Image
          command: |
            set -ex
            cd ~/repo
            docker-compose -f docker-compose.prod.yaml build --no-cache

      - run:
          name: Push Docker Images
          command: |
            set -ex
            cd ~/repo
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose -f docker-compose.prod.yaml push

      - add_ssh_keys:
          fingerprints:
            - "SHA256:1r+0RI8mIHtGT9P+b/LWVjSJufWbk/mh+dFb2M/uRWQ"

      - run:
          name: Deploy Application
          command: |
            set -ex
            cd ~/repo
            # Ensure the .env.production file is copied correctly
            scp -r -o "StrictHostKeyChecking=no" src ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" src/.env.production ubuntu@${SSH_HOST}:~/repo/.env
            scp -o "StrictHostKeyChecking=no" docker-compose.prod.yaml ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" php.prod.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" nginx.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" composer.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" entrypoint.sh ubuntu@${SSH_HOST}:~/repo/
            scp -r -o "StrictHostKeyChecking=no" nginx ubuntu@${SSH_HOST}:~/repo/
            ssh -o "StrictHostKeyChecking=no" ubuntu@${SSH_HOST} '
              set -ex
              cd ~/repo &&
              if ! docker network ls | grep -q your_network_name; then
                docker network create your_network_name;
              fi &&
              docker-compose -f docker-compose.prod.yaml pull &&
              docker-compose -f docker-compose.prod.yaml up -d &&
              docker-compose -f docker-compose.prod.yaml exec -T php composer install --no-dev --optimize-autoloader &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan migrate --force ||
              { echo "Migration failed"; exit 1; } &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan config:cache ||
              { echo "Config cache failed"; exit 1; } &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan route:cache ||
              { echo "Route cache failed"; exit 1; } &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan view:cache ||
              { echo "View cache failed"; exit 1; }'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
