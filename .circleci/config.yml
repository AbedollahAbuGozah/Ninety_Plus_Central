version: 2.1

executors:
  docker-executor:
    docker:
      - image: php:8-fpm-alpine
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - checkout
      - run:
          name: Ensure Local Directory Structure
          command: |
            set -ex
            if [ ! -d "src" ]; then
              echo "src directory does not exist. Please ensure it exists and contains your Laravel project files."
              exit 1
            fi
      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              bash \
              git \
              curl
      - run:
          name: Install Docker Compose
          command: |
            set -ex
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ]; then
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64" -o /usr/local/bin/docker-compose
            elif [ "$ARCH" = "aarch64" ]; then
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-aarch64" -o /usr/local/bin/docker-compose
            else
              echo "Unsupported architecture: $ARCH"
              exit 1
            fi
            chmod +x /usr/local/bin/docker-compose
            export PATH=$PATH:/usr/local/bin
            docker-compose --version
      - run:
          name: Build Docker Image
          command: |
            set -ex
            cd ~/repo
            /usr/local/bin/docker-compose -f docker-compose.prod.yaml build --no-cache

  deploy:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - checkout
      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              docker-compose \
              openssh-client
      - run:
          name: Build Docker Image
          command: |
            set -ex
            cd ~/repo
            /usr/local/bin/docker-compose -f docker-compose.prod.yaml build --no-cache
      - run:
          name: Push Docker Images
          command: |
            set -ex
            cd ~/repo
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            /usr/local/bin/docker-compose -f docker-compose.prod.yaml push
      - add_ssh_keys:
          fingerprints:
            - "SHA256:1r+0RI8mIHtGT9P+b/LWVjSJufWbk/mh+dFb2M/uRWQ"
      - run:
          name: Deploy Application
          command: |
            set -ex
            cd ~/repo
            scp -o "StrictHostKeyChecking=no" docker-compose.prod.yaml ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" php.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" nginx.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" composer.dockerfile ubuntu@${SSH_HOST}:~/repo/
            ssh -o "StrictHostKeyChecking=no" ubuntu@${SSH_HOST} 'mkdir -p /home/ubuntu/repo/src && chown -R ubuntu:ubuntu /home/ubuntu/repo' &&
            scp -r -o "StrictHostKeyChecking=no" src/* ubuntu@${SSH_HOST}:/home/ubuntu/repo/src &&
            scp -r -o "StrictHostKeyChecking=no" nginx ubuntu@${SSH_HOST}:~/repo/
            ssh -o "StrictHostKeyChecking=no" ubuntu@${SSH_HOST} '
              set -ex
              cd ~/repo &&
              if ! docker network ls | grep -q your_network_name; then
                docker network create your_network_name;
              fi &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml pull &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml up -d &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php bash -c "cd /var/www/html && composer install --prefer-dist --no-interaction --optimize-autoloader" &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php ls -la /var/www/html &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php php artisan migrate --force || (/usr/local/bin/docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php php artisan config:cache || (/usr/local/bin/docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php php artisan route:cache || (/usr/local/bin/docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              /usr/local/bin/docker-compose -f docker-compose.prod.yaml exec -T php php artisan view:cache || (/usr/local/bin/docker-compose -f docker-compose.prod.yaml logs php && exit 1)'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
