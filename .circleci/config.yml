version: 2.1

executors:
  docker-executor:
    docker:
      - image: php:8-fpm-alpine
    working_directory: ~/repo

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout

      - run:
          name: Ensure Local Directory Structure
          command: |
            set -ex
            if [ ! -d "src" ]; then
              echo "src directory does not exist. Please ensure it exists and contains your Laravel project files."
              exit 1
            fi

      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              bash \
              git \
              curl \
              gcc \
              g++ \
              make \
              autoconf \
              pkgconf \
              openssh

      - run:
          name: Install PHP Extensions
          command: |
            set -ex
            apk add --no-cache \
              libjpeg-turbo-dev \
              libpng-dev \
              freetype-dev
            docker-php-ext-configure gd --with-freetype --with-jpeg
            docker-php-ext-install -j$(nproc) gd pdo pdo_mysql exif
            docker-php-ext-enable exif

      - run:
          name: Install Composer
          command: |
            set -ex
            curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
            cd src
            composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

      - run:
          name: Run Laravel Tests
          command: |
            set -ex
            cd src
            cp .env.example .env
            # Write the provided .env content
            echo 'APP_NAME=Laravel' >> .env
            echo 'APP_ENV=local' >> .env
            echo 'APP_KEY=base64:HeNgMQOR6kIk2e6EADYGEeuPC9FrOqd7UX/q1K9Uu+8=' >> .env
            echo 'APP_DEBUG=true' >> .env
            echo 'APP_URL=http://localhost' >> .env
            echo 'LOG_CHANNEL=stack' >> .env
            echo 'LOG_DEPRECATIONS_CHANNEL=null' >> .env
            echo 'LOG_LEVEL=debug' >> .env
            echo 'DB_CONNECTION=mysql' >> .env
            echo "DB_HOST=${DB_HOST}" >> .env
            echo "DB_PORT=${DB_PORT}" >> .env
            echo "DB_DATABASE=${DB_DATABASE}" >> .env
            echo "DB_USERNAME=${DB_USERNAME}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
            echo 'PAYPAL_MODE=sandbox' >> .env
            echo 'PAYPAL_SANDBOX_CLIENT_ID=AWpgymUdV9FHxhzgLJitG13h8Np5SQZh4_6Z33gKli9Vdp6QpK3dWX25s8_qtDs5prVSNcGvaKeFWCco' >> .env
            echo 'PAYPAL_SANDBOX_CLIENT_SECRET=EJT8MWvVjmQAALgprh7o4giob7SZ42GIyjZF5v8F3ipbQLQ6N_gfX-uDfbrFY_7N2ryxhDHL2vysE632' >> .env
            echo 'BROADCAST_DRIVER=log' >> .env
            echo 'CACHE_DRIVER=file' >> .env
            echo 'FILESYSTEM_DISK=s3' >> .env
            echo 'QUEUE_CONNECTION=sync' >> .env
            echo 'SESSION_DRIVER=file' >> .env
            echo 'SESSION_LIFETIME=120' >> .env
            echo 'MEMCACHED_HOST=127.0.0.1' >> .env
            echo 'REDIS_HOST=127.0.0.1' >> .env
            echo 'REDIS_PASSWORD=null' >> .env
            echo 'REDIS_PORT=6379' >> .env
            echo 'MAIL_MAILER=smtp' >> .env
            echo 'MAIL_HOST=sandbox.smtp.mailtrap.io' >> .env
            echo 'MAIL_PORT=587' >> .env
            echo 'MAIL_USERNAME=4cf3ea16e0c99b' >> .env
            echo 'MAIL_PASSWORD=f364e9cdb4efb6' >> .env
            echo 'MAIL_ENCRYPTION=tls' >> .env
            echo 'MAIL_FROM_ADDRESS="hello@example.com"' >> .env
            echo 'MAIL_FROM_NAME="Your Application Name"' >> .env
            echo 'QUEUE_CONNECTION=database' >> .env
            echo 'AWS_ACCESS_KEY_ID=AKIATCKARDA3LIJ74E6M' >> .env
            echo 'AWS_SECRET_ACCESS_KEY=R9Kb+Y+7jN0qxcpQvZwQdTGVQkvhgc3Caqstp/lt' >> .env
            echo 'AWS_DEFAULT_REGION=us-east-1' >> .env
            echo 'AWS_BUCKET=ninety-plus' >> .env
            echo 'AWS_USE_PATH_STYLE_ENDPOINT=false' >> .env
            echo 'AWS_URL=https://ninety-plus.s3.us-east-1.amazonaws.com' >> .env
            echo 'PUSHER_APP_ID=' >> .env
            echo 'PUSHER_APP_KEY=' >> .env
            echo 'PUSHER_APP_SECRET=' >> .env
            echo 'PUSHER_HOST=' >> .env
            echo 'PUSHER_PORT=443' >> .env
            echo 'PUSHER_SCHEME=https' >> .env
            echo 'PUSHER_APP_CLUSTER=mt1' >> .env
            echo 'VITE_APP_NAME="${APP_NAME}"' >> .env
            echo 'VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"' >> .env
            echo 'VITE_PUSHER_HOST="${PUSHER_HOST}"' >> .env
            echo 'VITE_PUSHER_PORT="${PUSHER_PORT}"' >> .env
            echo 'VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"' >> .env
            echo 'VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"' >> .env
            echo 'JWT_SECRET=YPCgTxGJYnjfboiOri5VMSE91m6YOt34MWkylRn9vLBQQgmwEf0OB28M6ttVV1uu' >> .env
            echo 'MEDIA_DISK=s3' >> .env
            echo 'STRIPE_SECRET_KEY=sk_test_51PTpjJ2L2UU5Zpim8ZPjzdfDVudgldDMEAM8NPzLeEsDbFxssmL8vyLQhq4sWfGoGyZ8ZTedfhambxZftval2VVq00eRRB1P11' >> .env
            echo 'CURRENCY=usd' >> .env
            echo 'FRONT_END_DOMAIN=http://localhost:3000/' >> .env
            echo 'STREAM_API_KEY=whsuc3edb47g' >> .env
            echo 'STREAM_API_SECRET=uut3bgrw5v5aq94eavw8za9dtn7c4vjuyb64bq2amjb3naybdxttht927e6tv6y7' >> .env
            echo 'STREAM_APP_ID=1319248' >> .env

            php artisan config:clear
            php artisan config:cache
            php artisan migrate --force

  deploy:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7

      - checkout

      - run:
          name: Install System Dependencies
          command: |
            set -ex
            apk update
            apk add --no-cache \
              docker-compose \
              openssh

      - run:
          name: Build Docker Image
          command: |
            set -ex
            cd ~/repo
            docker-compose -f docker-compose.prod.yaml build --no-cache

      - run:
          name: Push Docker Images
          command: |
            set -ex
            cd ~/repo
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose -f docker-compose.prod.yaml push

      - add_ssh_keys:
          fingerprints:
            - "SHA256:1r+0RI8mIHtGT9P+b/LWVjSJufWbk/mh+dFb2M/uRWQ"

      - run:
          name: Deploy Application
          command: |
            set -ex
            cd ~/repo
            scp -o "StrictHostKeyChecking=no" docker-compose.prod.yaml ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" php.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" nginx.dockerfile ubuntu@${SSH_HOST}:~/repo/
            scp -o "StrictHostKeyChecking=no" composer.dockerfile ubuntu@${SSH_HOST}:~/repo/
            ssh -o "StrictHostKeyChecking=no" ubuntu@${SSH_HOST} 'sudo mkdir -p /home/ubuntu/repo/src && sudo chown -R ubuntu:ubuntu /home/ubuntu/repo' &&
            scp -r -o "StrictHostKeyChecking=no" src/* ubuntu@${SSH_HOST}:/home/ubuntu/repo/src &&
            scp -r -o "StrictHostKeyChecking=no" nginx ubuntu@${SSH_HOST}:~/repo/
            ssh -o "StrictHostKeyChecking=no" ubuntu@${SSH_HOST} '
              set -ex
              cd ~/repo &&
              if ! docker network ls | grep -q your_network_name; then
                docker network create your_network_name;
              fi &&
              docker-compose -f docker-compose.prod.yaml pull &&
              docker-compose -f docker-compose.prod.yaml up -d &&
              docker-compose -f docker-compose.prod.yaml exec -T php bash -c "cd /var/www/html && composer install --prefer-dist --no-interaction --optimize-autoloader" &&
              docker-compose -f docker-compose.prod.yaml exec -T php ls -la /var/www/html &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan migrate --force || (docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan config:cache || (docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan route:cache || (docker-compose -f docker-compose.prod.yaml logs php && exit 1) &&
              docker-compose -f docker-compose.prod.yaml exec -T php php artisan view:cache || (docker-compose -f docker-compose.prod.yaml logs php && exit 1)'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
